{"version":3,"sources":["api.ts","enums/FilterOptions.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterOptions","TodoItem","React","memo","todo","selectedTodoId","selectTodo","className","classNames","id","completed","title","type","onClick","TodoList","todos","map","filterOptions","Object","values","TodoFilter","selectedFilter","searchQuery","onSelectedFilterChange","onSearchQueryChange","value","onChange","event","target","filterOption","toUpperCase","slice","placeholder","length","style","pointerEvents","Loader","TodoModal","closeTodoModal","useState","todoUser","setTodoUser","isUserLoading","setIsUserLoading","userId","useEffect","getUser","user","href","email","name","App","setTodos","areTodosLoading","setAreTodosLoading","selectedTodo","setSelectedTodo","All","setSelectedFilter","filterQuery","setFilterQuery","downloadedTodos","filteredTodosByOption","useMemo","filter","Active","Completed","filteredTodos","toLowerCase","includes","trim","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.339ef893.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = (\n  'https://mate-academy.github.io/react_dynamic-list-of-todos/api'\n);\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedTodoId: number;\n  selectTodo: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(\n  ({ todo, selectedTodoId, selectTodo }) => {\n    return (\n      <tr\n        data-cy=\"todo\"\n        className={classNames({\n          'has-background-info-light': todo.id === selectedTodoId,\n        })}\n      >\n        <td className=\"is-vcentered\">{todo.id}</td>\n\n        {todo.completed ? (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        ) : (\n          <td className=\"is-vcentered\" />\n        )}\n\n        <td className=\"is-vcentered is-expanded\">\n          <p\n            className={classNames({\n              'has-text-danger': !todo.completed,\n              'has-text-success': todo.completed,\n            })}\n          >\n            {todo.title}\n          </p>\n        </td>\n\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={() => selectTodo(todo)}\n          >\n            <span className=\"icon\">\n              <i\n                className={classNames('far', {\n                  'fa-eye': todo.id !== selectedTodoId,\n                  'fa-eye-slash': todo.id === selectedTodoId,\n                })}\n              />\n            </span>\n          </button>\n        </td>\n      </tr>\n    );\n  },\n);\n","import React from 'react';\n\nimport { TodoItem } from '../TodoItem';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  selectTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({ todos, selectedTodoId, selectTodo }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            selectedTodoId={selectedTodoId}\n            selectTodo={selectTodo}\n          />\n        ))}\n      </tbody>\n    </table>\n  ),\n);\n","import React from 'react';\n\nimport { FilterOptions } from '../../enums/FilterOptions';\n\ntype Props = {\n  selectedFilter: FilterOptions;\n  searchQuery: string;\n  onSelectedFilterChange: (newFilter: FilterOptions) => void;\n  onSearchQueryChange: (newQuery: string) => void;\n};\n\nconst filterOptions = Object.values(FilterOptions);\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    selectedFilter,\n    searchQuery,\n    onSelectedFilterChange,\n    onSearchQueryChange,\n  }) => {\n    const clearSearchBar = () => onSearchQueryChange('');\n\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              value={selectedFilter}\n              onChange={(event) => {\n                onSelectedFilterChange(event.target.value as FilterOptions);\n              }}\n            >\n              {filterOptions.map((filterOption) => (\n                <option key={filterOption} value={filterOption}>\n                  {filterOption[0].toUpperCase() + filterOption.slice(1)}\n                </option>\n              ))}\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={searchQuery}\n            onChange={(event) => onSearchQueryChange(event.target.value)}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {searchQuery.length > 0 && (\n            <span\n              className=\"icon is-right\"\n              style={{ pointerEvents: 'all' }}\n            >\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={clearSearchBar}\n                aria-label=\"clear search bar\"\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\n\nimport { Loader } from '../Loader';\n\nimport { OptionalUser } from '../../types/OptionalUser';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  closeTodoModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, closeTodoModal }) => {\n  const [todoUser, setTodoUser] = useState<OptionalUser>(null);\n  const [isUserLoading, setIsUserLoading] = useState(true);\n\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = todo;\n\n  useEffect(() => {\n    getUser(userId).then((user) => {\n      setTodoUser(user);\n      setIsUserLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodoModal}\n              aria-label=\"close modal window\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {todoUser && (\n                <>\n                  {' by '}\n\n                  <a href={`mailto:${todoUser.email}`}>{todoUser.name}</a>\n                </>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { getTodos } from './api';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { OptionalTodo } from './types/OptionalTodo';\n\nimport { FilterOptions } from './enums/FilterOptions';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [areTodosLoading, setAreTodosLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<OptionalTodo>(null);\n  const [selectedFilter, setSelectedFilter] = useState(FilterOptions.All);\n  const [filterQuery, setFilterQuery] = useState('');\n\n  useEffect(() => {\n    getTodos().then((downloadedTodos) => {\n      setTodos(downloadedTodos);\n      setAreTodosLoading(false);\n    });\n  }, []);\n\n  const filteredTodosByOption = useMemo(() => {\n    return todos.filter((todo) => {\n      switch (selectedFilter) {\n        case FilterOptions.All:\n          return true;\n\n        case FilterOptions.Active:\n          return !todo.completed;\n\n        case FilterOptions.Completed:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }, [selectedFilter, todos]);\n\n  const filteredTodos = useMemo(() => {\n    return filteredTodosByOption.filter((todo) => {\n      return todo.title\n        .toLowerCase()\n        .includes(filterQuery.trim().toLowerCase());\n    });\n  }, [filterQuery, filteredTodosByOption]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilter={selectedFilter}\n                searchQuery={filterQuery}\n                onSelectedFilterChange={setSelectedFilter}\n                onSearchQueryChange={setFilterQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {areTodosLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodoId={selectedTodo?.id || 0}\n                  selectTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          closeTodoModal={() => setSelectedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}